using DG.Tweening;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class LetsPaintPlayer : MonoBehaviour
{

    //アニメーションに必要
    public enum SlimeAnimationState { Idle, Walk, Jump, Attack, Damage }

    public Face faces;
    public GameObject SmileBody;
    public SlimeAnimationState currentState;

    public Animator animator;
    public int damType;

    private Material faceMaterial;

    [SerializeField] private float moveSpeed = 5.0f;          // プレイヤーの移動速度
    [SerializeField] private float rotationSpeed = 180.0f;    // プレイヤーの回転速度
    [SerializeField] private float gravitySpeed = 0.05f;      // 重力速度
    [SerializeField] private float flashingTime;              //点滅時間
    [SerializeField] private bool isHorizontalInput = true;   // 横の入力許可するか
    [SerializeField] private bool isVerticalInput = true;     // 縦の入力許可するか
    [SerializeField] private bool isAnimIdle = true;
    [SerializeField] private bool isAnimWalk = true;
    [SerializeField] private bool isAnimJump = true;
    [SerializeField] private bool isAnimAttack = true;
    [SerializeField] private bool isAnimDamage = true;
    [SerializeField] private int playerNum;                   // プレイヤー番号
    [SerializeField] private Vector3 localGravity;
    private Rigidbody rBody;
    private Transform mainCameraTransform; // メインカメラのTransform

    private Vector3 initializPos;   //初期位置
    private bool isRespawn = false; //現在リスポーン中かどうか
    private Tweener tweener;        //Dotween用


    // Start is called before the first frame update
    void Start()
    {
        //初期位置設定
        initializPos = transform.position;

        // メインカメラを取得
        mainCameraTransform = Camera.main.transform;

        //リジットボディ取得
        rBody = this.GetComponent<Rigidbody>();
    }

    // Update is called once per frame
    void Update()
    {
        Move();
    }

    //移動
    private void Move()
    {
        // 入力を取得用
        float horizontalInput = 0;
        float verticalInput = 0;

        // 入力を取得
        if (isHorizontalInput) horizontalInput = Input.GetAxis("L_Stick_H" + playerNum);
        if (isVerticalInput) verticalInput = -Input.GetAxis("L_Stick_V" + playerNum);

        //入力がないのなら
        if (horizontalInput == 0 && verticalInput == 0)
        {
            //通常状態に変更
           // ChangeStateTo(SlimeAnimationState.Idle);
            return;
        }

        //歩き状態に変更
       // ChangeStateTo(SlimeAnimationState.Walk);

        // カメラの向きを基準にプレイヤーを移動
        Vector3 forwardDirection = mainCameraTransform.forward;
        Vector3 rightDirection = mainCameraTransform.right;
        forwardDirection.y = 0f; // Y軸成分を0にすることで水平方向に制限

        // 移動方向を計算
        Vector3 moveDirection = (forwardDirection.normalized * verticalInput + rightDirection.normalized * horizontalInput).normalized;

        // 移動
        rBody.AddForce(moveDirection * moveSpeed * Time.deltaTime);

        Quaternion newRotation = Quaternion.LookRotation(moveDirection);
        transform.rotation = Quaternion.Slerp(transform.rotation, newRotation, rotationSpeed * Time.deltaTime);
    }

    //リスポーンスタート
    IEnumerator StartRespawn(float delay)
    {
        yield return new WaitForSeconds(delay);

        //初期位置決定
        transform.position = initializPos;

        //重力を停止させる
        rBody.isKinematic = true;

        //メッシュレンダラーを取得(点滅)
        MeshRenderer r = GetComponent<MeshRenderer>();
        tweener = r.material.DOFade(0.3f, flashingTime).SetLoops(-1, LoopType.Yoyo);

        //コルーチン
        StartCoroutine(ReStart(3.0f));
    }

    //スタート
    IEnumerator ReStart(float delay)
    {
        yield return new WaitForSeconds(delay);

        //重力を復活
        rBody.isKinematic = false;

        //リスポート
        isRespawn = false;

        //点滅止める
        tweener.Restart();
        tweener.Pause();
    }

    //何かと当たった時に呼ばれる関数
    void OnTriggerEnter(Collider collision)
    {
        if (collision.transform.tag == "Sea" && !isRespawn)
        {
            isRespawn = true;
            StartCoroutine(StartRespawn(2.0f));
        }
    }
}
